
apiVersion: v1
kind: Namespace
metadata:
  name: nfrguard-agents
  labels:
    name: nfrguard-agents
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nfrguard-config
  namespace: nfrguard-agents
data:
  RAG_ENABLED: "true"
  GOOGLE_CLOUD_PROJECT: "joy-of-ai-2024"
  VECTOR_INDEX_ID: "mock_index_1758507633"
  VECTOR_ENDPOINT_ID: "mock_endpoint_1758507633"
  DEPLOYED_INDEX_ID: "nfrguard-deployed-index"
  LOG_LEVEL: "INFO"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: transaction-risk-agent
  namespace: nfrguard-agents
  labels:
    app: transaction-risk-agent
spec:
  replicas: 2
  selector:
    matchLabels:
      app: transaction-risk-agent
  template:
    metadata:
      labels:
        app: transaction-risk-agent
    spec:
      containers:
      - name: transaction-risk-agent
        image: python:3.11-slim
        ports:
        - containerPort: 8080
        env:
        - name: GOOGLE_CLOUD_PROJECT
          valueFrom:
            configMapKeyRef:
              name: nfrguard-config
              key: GOOGLE_CLOUD_PROJECT
        - name: RAG_ENABLED
          valueFrom:
            configMapKeyRef:
              name: nfrguard-config
              key: RAG_ENABLED
        command: ["python", "-c", "import http.server, socketserver; httpd = socketserver.TCPServer(('', 8080), http.server.SimpleHTTPRequestHandler); print('Transaction Risk Agent running on port 8080'); httpd.serve_forever()"]
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: transaction-risk-agent
  namespace: nfrguard-agents
spec:
  selector:
    app: transaction-risk-agent
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compliance-agent
  namespace: nfrguard-agents
  labels:
    app: compliance-agent
spec:
  replicas: 2
  selector:
    matchLabels:
      app: compliance-agent
  template:
    metadata:
      labels:
        app: compliance-agent
    spec:
      containers:
      - name: compliance-agent
        image: python:3.11-slim
        ports:
        - containerPort: 8080
        env:
        - name: GOOGLE_CLOUD_PROJECT
          valueFrom:
            configMapKeyRef:
              name: nfrguard-config
              key: GOOGLE_CLOUD_PROJECT
        - name: RAG_ENABLED
          valueFrom:
            configMapKeyRef:
              name: nfrguard-config
              key: RAG_ENABLED
        command: ["python", "-c", "import http.server, socketserver; httpd = socketserver.TCPServer(('', 8080), http.server.SimpleHTTPRequestHandler); print('Compliance Agent running on port 8080'); httpd.serve_forever()"]
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: compliance-agent
  namespace: nfrguard-agents
spec:
  selector:
    app: compliance-agent
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  type: ClusterIP
