# Transaction Risk Agent
apiVersion: apps/v1
kind: Deployment
metadata:
  name: transaction-risk-agent
  namespace: nfrguard-agents
  labels:
    app: transaction-risk-agent
    component: agent
spec:
  replicas: 2
  selector:
    matchLabels:
      app: transaction-risk-agent
  template:
    metadata:
      labels:
        app: transaction-risk-agent
    spec:
      serviceAccountName: nfrguard-sa
      containers:
      - name: transaction-risk-agent
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/transaction_risk-agent:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: nfrguard-config
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: logs
          mountPath: /var/log/nfrguard
      volumes:
      - name: logs
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: transaction-risk-agent
  namespace: nfrguard-agents
spec:
  selector:
    app: transaction-risk-agent
  ports:
  - name: http
    port: 8080
    targetPort: 8080
---
# Compliance Agent
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compliance-agent
  namespace: nfrguard-agents
  labels:
    app: compliance-agent
    component: agent
spec:
  replicas: 2
  selector:
    matchLabels:
      app: compliance-agent
  template:
    metadata:
      labels:
        app: compliance-agent
    spec:
      serviceAccountName: nfrguard-sa
      containers:
      - name: compliance-agent
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/compliance-agent:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: nfrguard-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: compliance-agent
  namespace: nfrguard-agents
spec:
  selector:
    app: compliance-agent
  ports:
  - name: http
    port: 8080
    targetPort: 8080
---
# Resilience Agent
apiVersion: apps/v1
kind: Deployment
metadata:
  name: resilience-agent
  namespace: nfrguard-agents
  labels:
    app: resilience-agent
    component: agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: resilience-agent
  template:
    metadata:
      labels:
        app: resilience-agent
    spec:
      serviceAccountName: nfrguard-sa
      containers:
      - name: resilience-agent
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/resilience-agent:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: nfrguard-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: resilience-agent
  namespace: nfrguard-agents
spec:
  selector:
    app: resilience-agent
  ports:
  - name: http
    port: 8080
    targetPort: 8080
---
# Customer Sentiment Agent
apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer-sentiment-agent
  namespace: nfrguard-agents
  labels:
    app: customer-sentiment-agent
    component: agent
spec:
  replicas: 2
  selector:
    matchLabels:
      app: customer-sentiment-agent
  template:
    metadata:
      labels:
        app: customer-sentiment-agent
    spec:
      serviceAccountName: nfrguard-sa
      containers:
      - name: customer-sentiment-agent
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/customer_sentiment-agent:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: nfrguard-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: customer-sentiment-agent
  namespace: nfrguard-agents
spec:
  selector:
    app: customer-sentiment-agent
  ports:
  - name: http
    port: 8080
    targetPort: 8080
---
# Data Privacy Agent
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-privacy-agent
  namespace: nfrguard-agents
  labels:
    app: data-privacy-agent
    component: agent
spec:
  replicas: 2
  selector:
    matchLabels:
      app: data-privacy-agent
  template:
    metadata:
      labels:
        app: data-privacy-agent
    spec:
      serviceAccountName: nfrguard-sa
      containers:
      - name: data-privacy-agent
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/data_privacy-agent:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: nfrguard-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: data-privacy-agent
  namespace: nfrguard-agents
spec:
  selector:
    app: data-privacy-agent
  ports:
  - name: http
    port: 8080
    targetPort: 8080
---
# Knowledge Agent
apiVersion: apps/v1
kind: Deployment
metadata:
  name: knowledge-agent
  namespace: nfrguard-agents
  labels:
    app: knowledge-agent
    component: agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: knowledge-agent
  template:
    metadata:
      labels:
        app: knowledge-agent
    spec:
      serviceAccountName: nfrguard-sa
      containers:
      - name: knowledge-agent
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/knowledge-agent:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: nfrguard-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: knowledge-agent
  namespace: nfrguard-agents
spec:
  selector:
    app: knowledge-agent
  ports:
  - name: http
    port: 8080
    targetPort: 8080
---
# Banking Assistant Agent
apiVersion: apps/v1
kind: Deployment
metadata:
  name: banking-assistant-agent
  namespace: nfrguard-agents
  labels:
    app: banking-assistant-agent
    component: agent
spec:
  replicas: 3
  selector:
    matchLabels:
      app: banking-assistant-agent
  template:
    metadata:
      labels:
        app: banking-assistant-agent
    spec:
      serviceAccountName: nfrguard-sa
      containers:
      - name: banking-assistant-agent
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/banking_assistant-agent:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: nfrguard-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: banking-assistant-agent
  namespace: nfrguard-agents
spec:
  selector:
    app: banking-assistant-agent
  ports:
  - name: http
    port: 8080
    targetPort: 8080
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nfrguard-agents-ingress
  namespace: nfrguard-agents
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/certificate-arn: ${ACM_CERTIFICATE_ARN}
spec:
  rules:
  - host: ${INGRESS_HOST}
    http:
      paths:
      - path: /banking-assistant
        pathType: Prefix
        backend:
          service:
            name: banking-assistant-agent
            port:
              number: 8080
      - path: /agents
        pathType: Prefix
        backend:
          service:
            name: banking-assistant-agent
            port:
              number: 8080

